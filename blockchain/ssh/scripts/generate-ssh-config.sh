#!/bin/bash

# ブロックチェーン用SSH設定ファイル生成スクリプト
# Generate SSH configuration for blockchain environment

set -e

# 設定
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSH_DIR="$(dirname "$SCRIPT_DIR")"
KEYS_DIR="$SSH_DIR/keys"
CONFIG_DIR="$SSH_DIR/config"
PROJECT_ROOT="$(cd "$SSH_DIR/../.." && pwd)"

# 色付きの出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ログ関数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 使用方法
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Generate SSH configuration for blockchain environment"
    echo ""
    echo "Options:"
    echo "  -e, --env <env>     Environment (dev|staging|prod|all) [default: dev]"
    echo "  -f, --force         Force overwrite existing configuration"
    echo "  -o, --output <path> Output SSH config file path [default: ~/.ssh/config]"
    echo "  --dry-run           Show what would be done without making changes"
    echo "  -h, --help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -e dev           # Generate config for development"
    echo "  $0 -e all -f        # Force generate config for all environments"
    echo "  $0 --dry-run        # Show what would be done"
}

# パラメータのデフォルト値
ENV="dev"
FORCE=false
OUTPUT_CONFIG="$HOME/.ssh/config"
DRY_RUN=false

# パラメータの解析
while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--env)
            ENV="$2"
            shift 2
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -o|--output)
            OUTPUT_CONFIG="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# 環境の検証
if [[ ! "$ENV" =~ ^(dev|staging|prod|all)$ ]]; then
    log_error "Invalid environment: $ENV. Must be one of: dev, staging, prod, all"
    exit 1
fi

# 環境変数ファイルの読み込み
ENV_FILE="$PROJECT_ROOT/.env.sample"
if [[ -f "$ENV_FILE" ]]; then
    log_info "Loading environment variables from: $ENV_FILE"
    source "$ENV_FILE"
else
    log_warn "Environment file not found: $ENV_FILE"
    log_warn "Please ensure .env.sample exists with blockchain settings"
    exit 1
fi

# SSH設定の生成
generate_ssh_config() {
    local env=$1
    local template_file="$CONFIG_DIR/ssh_config_template"
    local output_file="/tmp/blockchain_ssh_config_${env}.tmp"
    
    if [[ ! -f "$template_file" ]]; then
        log_error "Template file not found: $template_file"
        exit 1
    fi
    
    # 鍵ファイルのパス
    local key_path="$KEYS_DIR/blockchain_${env}_rsa"
    
    # 鍵ファイルの存在確認
    if [[ ! -f "$key_path" ]]; then
        log_error "SSH key not found: $key_path"
        log_error "Please run: $SCRIPT_DIR/generate-ssh-keys.sh -e $env"
        exit 1
    fi
    
    # 環境変数の設定
    case $env in
        dev)
            export BLOCKCHAIN_DEV_KEY_PATH="$key_path"
            ;;
        staging)
            export BLOCKCHAIN_STAGING_KEY_PATH="$key_path"
            ;;
        prod)
            export BLOCKCHAIN_PROD_KEY_PATH="$key_path"
            ;;
    esac
    
    # デプロイ用の設定も追加
    export BLOCKCHAIN_DEPLOY_KEY_PATH="$key_path"
    
    # テンプレートの処理
    log_info "Generating SSH config for environment: $env"
    envsubst < "$template_file" > "$output_file"
    
    # 設定の検証
    if [[ ! -s "$output_file" ]]; then
        log_error "Failed to generate SSH config"
        exit 1
    fi
    
    echo "$output_file"
}

# SSH設定をシステムに追加
add_to_ssh_config() {
    local config_file=$1
    local env=$2
    
    # .ssh ディレクトリの作成
    mkdir -p "$(dirname "$OUTPUT_CONFIG")"
    
    # 既存の設定をバックアップ
    if [[ -f "$OUTPUT_CONFIG" && "$FORCE" != true ]]; then
        local backup_file="${OUTPUT_CONFIG}.backup.$(date +%Y%m%d_%H%M%S)"
        log_info "Backing up existing SSH config to: $backup_file"
        cp "$OUTPUT_CONFIG" "$backup_file"
    fi
    
    # 既存の設定から該当部分を削除
    if [[ -f "$OUTPUT_CONFIG" ]]; then
        # 一時ファイルに既存の設定をコピー（該当部分以外）
        grep -v "^# Blockchain.*Environment" "$OUTPUT_CONFIG" | \
        grep -v "^Host blockchain-" > "${OUTPUT_CONFIG}.tmp" || true
        mv "${OUTPUT_CONFIG}.tmp" "$OUTPUT_CONFIG"
    fi
    
    # 新しい設定を追加
    log_info "Adding SSH configuration for environment: $env"
    echo "" >> "$OUTPUT_CONFIG"
    echo "# Blockchain SSH Configuration - Generated by ft_transcendence" >> "$OUTPUT_CONFIG"
    echo "# Environment: $env" >> "$OUTPUT_CONFIG"
    echo "# Generated at: $(date)" >> "$OUTPUT_CONFIG"
    cat "$config_file" >> "$OUTPUT_CONFIG"
    
    # 権限の設定
    chmod 600 "$OUTPUT_CONFIG"
    
    log_info "SSH configuration added to: $OUTPUT_CONFIG"
}

# メイン処理
main() {
    if [[ "$ENV" == "all" ]]; then
        for env in dev staging prod; do
            config_file=$(generate_ssh_config "$env")
            if [[ "$DRY_RUN" == true ]]; then
                log_info "Would add SSH config for: $env"
                log_info "Config file: $config_file"
            else
                add_to_ssh_config "$config_file" "$env"
            fi
        done
    else
        config_file=$(generate_ssh_config "$ENV")
        if [[ "$DRY_RUN" == true ]]; then
            log_info "Would add SSH config for: $ENV"
            log_info "Config file: $config_file"
            log_info "Config content:"
            echo "----------------------------------------"
            cat "$config_file"
            echo "----------------------------------------"
        else
            add_to_ssh_config "$config_file" "$ENV"
        fi
    fi
    
    if [[ "$DRY_RUN" != true ]]; then
        log_info ""
        log_info "SSH configuration generated successfully!"
        log_info "You can now connect using:"
        if [[ "$ENV" == "all" ]]; then
            log_info "  ssh blockchain-dev"
            log_info "  ssh blockchain-staging"
            log_info "  ssh blockchain-prod"
        else
            log_info "  ssh blockchain-$ENV"
        fi
        log_info ""
        log_info "To test the connection:"
        log_info "  ssh -T blockchain-$ENV"
    fi
}

# メイン処理の実行
main