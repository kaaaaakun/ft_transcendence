services:
  rdbms:
    image: postgres:16-alpine
    container_name: "rdbms"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - vol_rdbms:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} && pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"
    networks:
      - net_pong

  static-builder:
    build:
      context: .
      dockerfile: static-builder/Dockerfile
      target: build
      args:
        - VITE_API_URL
        - VITE_WEBSOCKET_URL
    container_name: "static-builder"
    volumes:
      - vol_static_builder:/usr/src/vite

  reverseproxy:
    container_name: "reverseproxy"
    image: nginx:1.26.1-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./reverseproxy/ssl/:/etc/ssl/
      - ./reverseproxy/nginx.conf:/etc/nginx/nginx.conf
      - vol_static_builder:/usr/share/nginx/html # vol_static_builderをマウント
    networks:
      - net_pong
    depends_on:
      api:
        condition: service_healthy
      rdbms:
        condition: service_healthy
      static-builder:
        condition: service_completed_successfully

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: deploy_asgi
    container_name: "api"
    expose:
      - "8000"
    networks:
      - net_pong
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      rdbms:
        condition: service_healthy
      in_memory_db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-H",
          "Host: reverseproxy",
          "http://localhost:8000/health/",
        ]
      interval: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    container_name: "elasticsearch"
    environment:
      discovery.type: single-node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - net_pong

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    container_name: "kibana"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    networks:
      - net_pong
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.2
    container_name: "logstash"
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
    environment:
      ELASTICSEARCH_HOST: "elasticsearch"
      ELASTICSEARCH_PORT: "9200"
    networks:
      - net_pong
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    container_name: "filebeat"
    build:
      context: filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      elasticsearch:
        condition: service_healthy

  in_memory_db:
    container_name: "in_memory_db"
    image: redis:7.4.2
    networks:
      - net_pong
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
  setup: 
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      elasticsearch:
        condition: service_healthy

networks:
  net_pong:
    name: "net_pong"

volumes:
  vol_rdbms:
    name: "vol_rdbms"
  vol_static_builder:
    name: "vol_static_builder"
