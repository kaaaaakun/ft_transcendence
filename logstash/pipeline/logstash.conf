# input {
#   exec {
#     command => "top -b -n 1"
#     interval => 10
#     type => "metrics_test"
#   }
# }

# filter {
#   if [type] == "metrics_test" {
#     grok {
#       match => {
#         "message" => [
#           ".*load average: %{NUMBER:load1}, %{NUMBER:load5}, %{NUMBER:load15}.*",
#           ".*Cpu\\(s\\): %{NUMBER:cpu_user}%%us, %{NUMBER:cpu_sys}%%sy, %{NUMBER:cpu_idle}%%id.*",
#           ".*MiB Mem : %{NUMBER:total_mem} total, %{NUMBER:free_mem} free, %{NUMBER:used_mem} used, %{NUMBER:buff_cache_mem} buff/cache.*",
#           ".*MiB Swap: %{NUMBER:total_swap} total, %{NUMBER:free_swap} free, %{NUMBER:used_swap} used. %{NUMBER:avail_mem} avail Mem.*"
#         ]
#       }
#     }
#     mutate {
#       convert => {
#         "load1" => "float"
#         "load5" => "float"
#         "load15" => "float"
#         "cpu_user" => "float"
#         "cpu_sys" => "float"
#         "cpu_idle" => "float"
#         "total_mem" => "float"
#         "free_mem" => "float"
#         "used_mem" => "float"
#         "buff_cache_mem" => "float"
#         "total_swap" => "float"
#         "free_swap" => "float"
#         "used_swap" => "float"
#         "avail_mem" => "float"
#       }
#     }
#   }
# }

# output {
#   elasticsearch {
#     hosts => ["http://elasticsearch:9200"]
#     index => "system-metrics-%{+YYYY.MM.dd}"
#     user => "elastic"
#     password => "changeme"
#   }
#   stdout { codec => rubydebug }
# }


input {
  beats {
    port => 5044
  }
  http {
    port => 8080
    }
}

filter {
  if [docker][container][name] == "elasticsearch" {
    grok {
      match => {
        "message" => [
          '{"@timestamp":"%{TIMESTAMP_ISO8601:@timestamp}", "log.level": "%{LOGLEVEL:log_level}", "message":"%{GREEDYDATA:message}", "ecs.version": "%{DATA:ecs_version}","service.name":"%{DATA:service_name}","event.dataset":"%{DATA:event_dataset}","process.thread.name":"%{DATA:process_thread_name}","log.logger":"%{DATA:log_logger}","elasticsearch.cluster.uuid":"%{DATA:elasticsearch_cluster_uuid}","elasticsearch.node.id":"%{DATA:elasticsearch_node_id}","elasticsearch.node.name":"%{DATA:elasticsearch_node_name}","elasticsearch.cluster.name":"%{DATA:elasticsearch_cluster_name}"}'
        ]
      }
    }
    date {
      match => ["@timestamp", "ISO8601"]
      target => "@timestamp"
    }
  } else if [docker][container][name] == "filebeat-1" {
    json {
      source => "message"
      target => "filebeat_metrics"
      on_error => "drop" # JSON解析エラーが発生した場合、イベントを破棄
    }
    if [filebeat_metrics] { # JSON解析が成功した場合のみ処理
      date {
        match => ["filebeat_metrics.@timestamp", "ISO8601"]
        target => "@timestamp"
      }
      mutate {
        remove_field => ["message"]
        convert => {
          "[filebeat_metrics][monitoring][metrics][beat][cpu][total][time][ms]" => "integer"
          "[filebeat_metrics][monitoring][metrics][beat][info][uptime][ms]" => "integer"
        }
      }

      if [filebeat_metrics][monitoring][metrics][beat][cpu][total][time][ms] and [filebeat_metrics][monitoring][metrics][beat][info][uptime][ms] and [filebeat_metrics][monitoring][metrics][beat][info][uptime][ms] > 0 {
        ruby {
          code => '
            cpu_total_ms = event.get("[filebeat_metrics][monitoring][metrics][beat][cpu][total][time][ms]")
            uptime_ms = event.get("[filebeat_metrics][monitoring][metrics][beat][info][uptime][ms]")
            if cpu_total_ms and uptime_ms and uptime_ms > 0
              cpu_usage = (cpu_total_ms.to_f / uptime_ms.to_f) * 100
              event.set("cpu_usage", cpu_usage)
            end
          '
        }
      }
      mutate {
        remove_field => ["[filebeat_metrics][monitoring][metrics][beat][cpu][total][time][ms]", "[filebeat_metrics][monitoring][metrics][beat][info][uptime][ms]"]
      }
    }
  }
}
# filter {
#   if [docker][container][name] == "elasticsearch" {
#     grok {
#       match => {
#         "message" => [
#           '{"@timestamp":"%{TIMESTAMP_ISO8601:@timestamp}", "log.level": "%{LOGLEVEL:log_level}", "message":"%{GREEDYDATA:message}", "ecs.version": "%{DATA:ecs_version}","service.name":"%{DATA:service_name}","event.dataset":"%{DATA:event_dataset}","process.thread.name":"%{DATA:process_thread_name}","log.logger":"%{DATA:log_logger}","elasticsearch.cluster.uuid":"%{DATA:elasticsearch_cluster_uuid}","elasticsearch.node.id":"%{DATA:elasticsearch_node_id}","elasticsearch.node.name":"%{DATA:elasticsearch_node_name}","elasticsearch.cluster.name":"%{DATA:elasticsearch_cluster_name}"}'
#         ]
#       }
#     }
#     date {
#       match => ["@timestamp", "ISO8601"]
#       target => "@timestamp"
#     }
#   }
# }

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user => "elastic"
    password => "changeme"
    index => "docker-logs-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}
