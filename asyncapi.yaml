---
asyncapi: 2.1.0
id: 'urn:ft_transcendence'
defaultContentType: 'application/json'
info:
  title: ft_transcendence
  version: 1.0.0
  description: This API is designed for a pong game.
  contact:
    name: とらせん
    email: ft_transcendence@example.com
    url: 'https://example.com/contact'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: pong
    description: API for the pong game

servers:
  localhost:
    url: 'ws://localhost/api/ws'
    protocol: ws

channels:
  /api/ws/local-simple-match:
    publish:
      operationId: sendKeyInputForSimpleMatch
      message:
        $ref: '#/components/messages/KeyInput'
    subscribe:
      operationId: onMatchStatusForSimpleMatch
      message:
        $ref: '#/components/messages/MatchStatus'

  /api/ws/room.WAITING_{playerCount}P.{tournamentId}/:
    parameters:
      playerCount:
        description: プレイヤー数 (4または8)
        schema:
          type: integer
          enum:
            - 4
            - 8
      tournamentId:
        description: トーナメントのID
        schema:
          type: string
    subscribe:
      operationId: onWaitingRoomStatus
      message:
        $ref: '#/components/messages/waitingRoomStatus'

  /api/ws/room.{matchType}.{matchId}:
    parameters:
      matchType:
        description: マッチのタイプ (TOURNAMENT_MATCH)
        schema:
          type: string
          enum: [SIMPLE, TOURNAMENT_MATCH]
      matchId:
        description: マッチのID
        schema:
          type: string
    publish:
      operationId: sendKeyInputForRemoteMatch
      message:
        $ref: '#/components/messages/KeyInput'
    subscribe:
      operationId: onMatchStatusForRemoteMatch
      message:
        oneOf:
          - $ref: '#/components/messages/MatchStart'
          - $ref: '#/components/messages/MatchUpdate'
          - $ref: '#/components/messages/MatchEnd'

components:
  messages:
    KeyInput:
      payload:
        type: object
        properties:
          left:
            $ref: '#/components/schemas/KeyInput'
          right:
            $ref: '#/components/schemas/KeyInput'

    MatchStatus:
      payload:
        type: object
        required:
          - left
          - right
          - ballPosition
        properties:
          left:
            $ref: '#/components/schemas/PlayerStatus'
          right:
            $ref: '#/components/schemas/PlayerStatus'
          ballPosition:
            $ref: '#/components/schemas/BallPosition'

    waitingRoomStatus:
      payload:
        type: object
        required:
          - status
          - entry_count
          - waiting_for
          - members
          - connected_members
        properties:
          status:
            type: string
            description: トーナメントの状態
            enum:
              - waiting
              - ready
              - finished
          entry_count:
            type: integer
          waiting_for:
            type: integer
          members:
            type: array
            items:
              type: object
              required:
                - user_id
                - display_name
                - entry_number
                - round
                - player
                - tournament_players
              properties:
                user_id:
                  type: integer
                display_name:
                  type: string
                entry_number:
                  type: integer
                round:
                  type: integer
                player:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
                tournament_players:
                  type: object
                  required:
                    - victory_count
                  properties:
                    victory_count:
                      type: integer
          connected_members:
            type: array
            items:
              type: object
              required:
                - user_id
                - display_name
                - status
              properties:
                user_id:
                  type: integer
                display_name:
                  type: string
                status:
                  type: string
                  enum:
                    - connected
                    - disconnected
          match_ongoing:
            type: string
            description: ユーザーが参加できるマッチがあったら返す。これを見てフロントはゲーム画面にアクセスできる。
            example: 'room.TOURNAMENT_MATCH.3'

    MatchStart:
      payload:
        type: object
        required: [type, players]
        properties:
          type:
            type: string
            enum: [start]
          players:
            type: object
            required: [left, right]
            properties:
              left:
                $ref: '#/components/schemas/PlayerInfo'
              right:
                $ref: '#/components/schemas/PlayerInfo'

    MatchUpdate:
      payload:
        type: object
        required: [type, left, right, ballPosition]
        properties:
          type:
            type: string
            enum: [update]
          left:
            $ref: '#/components/schemas/PlayerStatus'
          right:
            $ref: '#/components/schemas/PlayerStatus'
          ballPosition:
            $ref: '#/components/schemas/BallPosition'

    MatchEnd:
      payload:
        type: object
        required: [type, left, right, winner, redirectUrl]
        properties:
          type:
            type: string
            enum: [end]
          left:
            $ref: '#/components/schemas/PlayerStatus'
          right:
            $ref: '#/components/schemas/PlayerStatus'
          winner:
            type: string
            description: 勝利したプレイヤー名
          redirectUrl:
            type: string
            description: リダイレクト先の URL

  schemas:
    KeyInput:
      type: object
      required:
        - key
        - action
      properties:
        key:
          type: string
          enum:
            - PaddleUpKey
            - PaddleDownKey
        action:
          type: string
          enum:
            - push
            - release

    BallPosition:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: float
        y:
          type: number
          format: float

    PlayerStatus:
      type: object
      required:
        - paddlePosition
        - score
      properties:
        paddlePosition:
          type: number
          format: float
        score:
          type: integer

    PlayerInfo:
      type: object
      required: [display_name]
      properties:
        display_name:
          type: string
