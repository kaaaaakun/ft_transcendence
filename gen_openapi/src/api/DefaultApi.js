/**
 * Tournament API
 * トーナメント、試合、プレイヤーの管理用API。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import MatchResponse from '../model/MatchResponse';
import ScoreRequest from '../model/ScoreRequest';
import ScoreResponse from '../model/ScoreResponse';
import TournamentRequest from '../model/TournamentRequest';
import TournamentResponse from '../model/TournamentResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the matchesGet operation.
     * @callback module:api/DefaultApi~matchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 試合の開始
     * 次の試合の詳細を取得します。
     * @param {module:api/DefaultApi~matchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchResponse}
     */
    matchesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchResponse;
      return this.apiClient.callApi(
        '/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresPut operation.
     * @callback module:api/DefaultApi~scoresPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * スコアの更新
     * 試合中のプレイヤーのスコアを増加させます。
     * @param {module:model/ScoreRequest} scoreRequest 
     * @param {module:api/DefaultApi~scoresPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreResponse}
     */
    scoresPut(scoreRequest, callback) {
      let postBody = scoreRequest;
      // verify the required parameter 'scoreRequest' is set
      if (scoreRequest === undefined || scoreRequest === null) {
        throw new Error("Missing the required parameter 'scoreRequest' when calling scoresPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreResponse;
      return this.apiClient.callApi(
        '/scores', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentsGet operation.
     * @callback module:api/DefaultApi~tournamentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TournamentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * トーナメントの表示
     * 試合からトーナメントに戻るためのAPI。
     * @param {module:api/DefaultApi~tournamentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TournamentResponse}
     */
    tournamentsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TournamentResponse;
      return this.apiClient.callApi(
        '/tournaments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentsPost operation.
     * @callback module:api/DefaultApi~tournamentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TournamentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * トーナメントの作成
     * プレイヤーのリストを使用して新しいトーナメントを作成します。プレイヤーの数は2の累乗（例：2、4、8、16）でなければなりません。
     * @param {module:model/TournamentRequest} tournamentRequest 
     * @param {module:api/DefaultApi~tournamentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TournamentResponse}
     */
    tournamentsPost(tournamentRequest, callback) {
      let postBody = tournamentRequest;
      // verify the required parameter 'tournamentRequest' is set
      if (tournamentRequest === undefined || tournamentRequest === null) {
        throw new Error("Missing the required parameter 'tournamentRequest' when calling tournamentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TournamentResponse;
      return this.apiClient.callApi(
        '/tournaments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
