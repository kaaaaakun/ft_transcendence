services:
  rdbms:
    image: postgres:16-alpine
    container_name: "rdbms"
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - vol_rdbms:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} && pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
    ports:
      - "5432:5432"
    networks:
      - net_pong

  static-builder:
    build:
      context: .
      dockerfile: static-builder/Dockerfile
      target: development
    container_name: "static-builder"
    restart: on-failure
    environment:
      - VITE_API_URL
      - VITE_WEBSOCKET_URL
    volumes:
      - ./static-builder:/usr/src/vite
    networks:
      - net_pong
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:5173/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
    entrypoint:
      [
        "sh",
        "-c",
        "pnpm config set store-dir /tmp/pnpm/store && pnpm install --frozen-lockfile && pnpm dev",
      ]

  reverseproxy:
    container_name: "reverseproxy"
    restart: on-failure
    image: nginx:1.26.1-alpine
    ports:
      - "80:80"
    volumes:
      - ./reverseproxy/nginx.local.conf:/etc/nginx/nginx.conf
    networks:
      - net_pong
    depends_on:
      api:
        condition: service_healthy
      static-builder:
        condition: service_healthy
      rdbms:
        condition: service_healthy

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: deploy_asgi
    container_name: "api"
    restart: on-failure
    networks:
      - net_pong
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      rdbms:
        condition: service_healthy
      in_memory_db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-H",
          "Host: reverseproxy",
          "http://localhost:8000/health/",
        ]
      interval: 5s
      retries: 5
      start_period: 120s

  in_memory_db:
    container_name: "in_memory_db"
    image: redis:7.4.2
    networks:
      - net_pong
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  elasticsearch:
    container_name: "elasticsearch"
    image: "elasticsearch"
    build:
      context: elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - vol_elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      # - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - net_pong

  kibana:
    container_name: "kibana"
    image: "kibana"
    build:
      context: elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      - elasticsearch

  logstash:
    container_name: "logstash"
    image: "logstash"
    build:
      context: elk/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      # - 50000:50000/tcp
      # - 50000:50000/udp
      # - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      ELASTIC_USER: ${ELASTIC_USER:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      - elasticsearch

  filebeat:
    container_name: "filebeat"
    image: "filebeat"
    build:
      context: elk/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      - elasticsearch

  setup:
    profiles:
      - setup
    image: "setup-elk"
    container_name: "setup-elk"
    build:
      context: elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./elk/setup/lib.sh:/lib.sh:ro,Z
      - ./elk/setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - net_pong
    depends_on:
      - elasticsearch

networks:
  net_pong:
    name: "net_pong"

volumes:
  vol_rdbms:
    name: "vol_rdbms"
  vol_elasticsearch:
    name: "vol_elasticsearch"
